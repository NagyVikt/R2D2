<?xml version="1.0" encoding="utf-8"?>
<robot name="atirobot" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- <xacro:property name="base_mass" value="205.727203925287"/>
  <xacro:property name="base_inertia" value="10.9025323917163 4.42975783799053E-16 0.0566917218527978 15.7337841319646 2.63067508042847E-16 11.7435298335432"/>

  <xacro:property name="link_mass" value="1.25388816786403"/>
  <xacro:property name="link_inertia" value="0.0025932643932963 -3.98187122859934E-20 -3.88589526202761E-21 0.00450987897269118 1.4847523089569E-21 0.0025932643932963"/> -->

<!-- ****************** ROBOT CONSTANTS *******************************  -->
  <!-- Define the size of the robot's main chassis in meters -->
  <xacro:property name="base_width" value="0.45"/>
  <xacro:property name="base_length" value="0.665"/>
  <xacro:property name="base_height" value="0.73"/>
	
  <!-- Define the shape of the robot's two back wheels in meters -->
  <xacro:property name="wheel_radius" value="0.055"/>
  <xacro:property name="wheel_width" value="0.17"/>

  <!-- x-axis points forward, y-axis points to left, z-axis points upwards -->
  <!-- Define the gap between the wheel and chassis along y-axis in meters -->
  <xacro:property name="wheel_ygap" value="0.075"/>

  <!-- Position the wheels along the z-axis -->
  <xacro:property name="wheel_zoff" value="0.05"/>

  <!-- Position the wheels along the x-axis -->
  <xacro:property name="wheel_xoff" value="0.21"/>

  <!-- Position the caster wheel along the x-axis -->
  <xacro:property name="caster_xoff" value="0.217"/>

  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>



  <!-- ********************** ROBOT BASE *********************************  -->
  <link name="base_footprint">
  </link>

  <joint name="base_footprint_joint" type="fixed">
    <origin xyz="0.0 0.0 0.73" rpy="0 0 0"/>
    <parent link="base_footprint"/>
    <child link="base_link"/>
  </joint>

  <link name="base_link">
    <inertial>
      <origin
        xyz="0.000766841725954676 2.02048717095321E-17 -0.329344123917288"
        rpy="0 0 0" />
      <mass
        value="205.727203925287" />
      <inertia
        ixx="10.9025323917163"
        ixy="4.42975783799053E-16"
        ixz="0.0566917218527978"
        iyy="15.7337841319646"
        iyz="2.63067508042847E-16"
        izz="11.7435298335432" />
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
         <mesh
          filename="package://r2d2/meshes/robotbase.stl" />
      </geometry>
      <material name=""><color rgba="1 0.968627450980392 0.215686274509804 1" /></material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh
          filename="package://r2d2/meshes/robotbase.stl" />
      </geometry>
    </collision>
    <xacro:box_inertia m="40.0" w="${base_width}" d="${base_length}" h="${base_height}"/>

  </link>


  
 <!-- *********************** DRIVE WHEELS ******************************  -->

  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
     
      <inertial>
        <origin xyz="5.55111512312578E-17 -0.0277740369558408 1.38777878078145E-17" rpy="0 0 0" />
        <mass value="1.25388816786403" />
        <inertia ixx="0.0025932643932963" ixy="-3.98187122859934E-20" ixz="-3.88589526202761E-21" iyy="0.00450987897269118" iyz="1.4847523089569E-21" izz="0.0025932643932963" />
      </inertial>

      <visual>

        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <mesh filename="package://r2d2/meshes/${prefix}_link.STL" />

            <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="White">
          <color rgba="${255/255} ${255/255} ${255/255} 1.0"/>
        </material>
      </visual>
      
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <mesh filename="package://r2d2/meshes/${prefix}_link.STL" />

          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      
      <xacro:cylinder_inertia m="110.5" r="${wheel_radius}" h="${wheel_width}"/>
      
    </link>

    <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
    <joint name="${prefix}_joint" type="revolute">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} -0.65199" rpy="0 0 0"/>


      <limit upper="3.1415" lower="-3.1415" effort="1" velocity="1"/>
      <axis xyz="0 -1 0"/>
    </joint>

  </xacro:macro>

  <!-- Instantiate two wheels using the macro we just made through the 
       xacro:wheel tags. We also define the parameters to have one wheel
       on both sides at the back of our robot (i.e. x_reflect=-1). -->
  <!-- <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" /> -->
  <xacro:wheel prefix="drivewhl_l" x_reflect="1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="1" y_reflect="-1" />


<!-- *********************** RealSense D435I CAMERA SETUP *************************  -->
  
  <!-- You can also define properties for the camera joint origin, mesh files, sizes, etc. if you find that useful -->
  <!-- For brevity, I've kept the camera setup as it is -->

  <joint name="camera_joint" type="fixed">
    <origin xyz="0.345 0 -0.102" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="camera_link"/>
  </joint>
  
  <link name="camera_link">
    <collision>
      <origin xyz="0.003 0.065 0.007" rpy="0 0 0"/>
      <geometry>
        <box size="0.012 0.132 0.020"/>
      </geometry>
    </collision>
  </link>

  <joint name="camera_base_link_joint" type="fixed">
    <origin xyz="0.005 0.018 0.013" rpy="0 0 0"/>
    <parent link="camera_link"/>
    <child link="camera_base_link"/>
  </joint>
  <link name="camera_base_link"/>

  <joint name="camera_rgb_joint" type="fixed">
    <origin xyz="0.005 0.018 0.013" rpy="0 0 0"/>
    <parent link="camera_link"/>
    <child link="camera_rgb_frame"/>
  </joint>
  <link name="camera_rgb_frame"/>

  <joint name="camera_rgb_optical_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <parent link="camera_rgb_frame"/>
    <child link="camera_rgb_optical_frame"/>
  </joint>
  <link name="camera_rgb_optical_frame"/>

  <joint name="realsense_depth_joint" type="fixed">
    <origin xyz="0.005 0.028 0.013" rpy="0 0 0"/>
    <!-- <origin xyz="${r200_cam_rgb_px} ${r200_cam_rgb_py + r200_cam_depth_offset} ${r200_cam_rgb_pz}" rpy="0 0 0"/> -->
    <parent link="camera_link"/>
    <child link="realsense_depth_frame"/>
  </joint>
  <link name="realsense_depth_frame"/>

  <joint name="camera_depth_optical_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <parent link="realsense_depth_frame"/>
    <child link="camera_depth_optical_frame"/>
  </joint>
  <link name="camera_depth_optical_frame"/>

  <joint name="camera_imu_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <parent link="camera_link"/>
      <child link="camera_imu_frame"/>
  </joint>
  <link name="camera_imu_frame"/>

  <!-- Transform from camera_gyro_optical_frame to base_link -->
  <joint name="camera_gyro_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0"/>

      <parent link="camera_link"/>
      <child link="camera_gyro_optical_frame"/>
  </joint>
  <link name="camera_gyro_optical_frame"/>

  <!-- Transform from camera_gyro_optical_frame to base_link -->
  <joint name="camera_gyro_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <parent link="camera_link"/>
      <child link="camera_gyro_frame"/>
  </joint>
  <link name="camera_gyro_frame"/>


   <!-- <joint name="camera_color_frame_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <parent link="camera_link"/>
      <child link="camera_color_frame"/>
  </joint>
  <link name="camera_color_frame"/> -->

  <!-- 
  <joint name="camera_color_optical_frame_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <parent link="camera_link"/>
      <child link="camera_color_optical_frame"/>
  </joint>
  <link name="camera_color_optical_frame"/>
-->
  <joint name="camera_accel_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0"/>


      <parent link="camera_link"/>
      <child link="camera_accel_frame"/>
  </joint>
  <link name="camera_accel_frame"/>


</robot>

